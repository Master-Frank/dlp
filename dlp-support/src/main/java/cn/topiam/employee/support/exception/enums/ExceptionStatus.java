package cn.topiam.employee.support.exception.enums;

/**
 * 异常状态枚举
 * <p>
 * 定义系统中各种异常状态码和对应的消息。每个枚举实例代表一种特定的业务或系统异常情况。
 * </p>
 */
public enum ExceptionStatus {

    /**
     * 系统内部错误 (500)。
     * 当捕获到未预期的、非业务性的运行时异常时抛出，表示服务端代码执行出现严重问题。
     */
    EX900003("EX900003", "系统内部错误"),

    /**
     * 参数验证失败。
     * 当请求参数通过了基本的格式校验，但在业务逻辑层面验证不通过时抛出（例如：邮箱已注册、用户名不符合规则）。
     */
    EX000202("EX000202", "参数验证失败"),

    /**
     * 请求参数错误。
     * 当客户端传递的请求参数在格式、类型或必填项上不符合接口定义时抛出（例如：缺少必要字段、字段类型错误）。
     */
    EX000100("EX000100", "请求参数错误"),

    /**
     * 系统异常。
     * 通用的系统级异常兜底码，当发生无法归类到具体错误码的系统问题时使用。
     */
    EX900000("EX900000", "系统异常"),

    /**
     * 数据不存在。
     * 当根据指定ID或条件查询数据时，未能找到任何匹配的记录。
     */
    EX000104("EX000104", "数据不存在"),

    /**
     * 权限不足。
     * 当用户的身份（身份凭证有效）不具备访问某个资源或执行某个操作所需的权限时抛出。
     */
    EX000107("EX000107", "权限不足"),

    /**
     * 操作被禁止。
     * 当用户的操作违反了系统的安全策略或业务规则而被明确禁止时抛出（例如：删除系统内置角色）。
     */
    EX000109("EX000109", "操作被禁止"),

    /**
     * 请求超时。
     * 当客户端发起的请求在规定时间内未能得到服务器响应时抛出。
     */
    EX000203("EX000203", "请求超时"),

    /**
     * 服务不可用。
     * 表示该服务当前暂时无法处理请求，可能是由于维护、过载等原因。
     */
    EX000201("EX000201", "服务不可用"),

    /**
     * 认证失败。
     * 当提供的认证信息（如Token、Session）无效、过期或伪造时抛出。
     */
    EX000106("EX000106", "认证失败"),

    /**
     * 账户不存在。
     * 当尝试登录或查找一个不存在的用户账户时抛出。
     */
    EX000101("EX000101", "账户不存在"),

    /**
     * 密码错误。
     * 当提供的密码与账户记录的密码不匹配时抛出。
     */
    EX000105("EX000105", "密码错误"),

    /**
     * 请求过于频繁。
     * 当客户端在短时间内发送了过多请求，触发了系统的频率限制（Rate Limiting）时抛出。
     */
    EX000205("EX000205", "请求过于频繁"),

    /**
     * 数据库异常。
     * 当与数据库交互时发生错误，如连接失败、SQL执行异常等。
     */
    EX900008("EX900008", "数据库异常"),

    /**
     * 网络异常。
     * 当系统在进行网络通信（如调用外部API）时遇到连接问题、网络中断等。
     */
    EX900002("EX900002", "网络异常"),

    /**
     * 配置错误。
     * 当系统启动或运行时，检测到关键配置项缺失、格式错误或值不合法。
     */
    EX900001("EX900001", "配置错误"),

    /**
     * 会话过期。
     * 用户的登录会话已过期，需要重新登录。
     */
    EX000102("EX000102", "会话过期"),

    /**
     * 文件上传失败。
     * 在文件上传过程中，因文件大小、类型、存储空间等原因导致上传操作失败。
     */
    EX900007("EX900007", "文件上传失败"),

    /**
     * 数据格式错误。
     * 接收到的数据格式不符合预期（例如：期望JSON却收到XML，JSON结构错误）。
     */
    EX900009("EX900009", "数据格式错误"),

    /**
     * 服务正在维护。
     * 系统正在进行计划内或紧急维护，暂时停止服务。
     */
    EX900004("EX900004", "服务正在维护"),

    /**
     * 功能未实现。
     * 请求的功能在当前版本中尚未开发完成或未启用。
     */
    EX900005("EX900005", "功能未实现"),

    /**
     * 版本不兼容。
     * 客户端使用的API版本与服务器端不兼容，或者数据版本不匹配。
     */
    EX900006("EX900006", "版本不兼容"),

    /**
     * 账户已被锁定。
     * 用户因多次登录失败或其他安全原因，账户被系统临时或永久锁定。
     */
    EX000103("EX000103", "账户已被锁定"),

    /**
     * 验证码错误。
     * 用户输入的验证码与系统生成的验证码不一致。
     */
    EX000108("EX000108", "验证码错误");
```

D:\project\dlp\dlp-test\src\main\java\cn\topiam\employee\support\exception\enums\ExceptionStatus.java
```java
<<<<<<< SEARCH
import cn.topiam.employee.support.security.jackjson.GrantedAuthorityMixin;
    EX000202("EX000202", "参数验证失败"),
    EX000100("EX000100", "请求参数错误"),
    EX900000("EX900000", "系统异常"),
    EX000104("EX000104", "数据不存在"),
    EX000107("EX000107", "权限不足"),
    EX000109("EX000109", "操作被禁止"),
    EX000203("EX000203", "请求超时"),
    EX000201("EX000201", "服务不可用"),
    EX000106("EX000106", "认证失败"),
    EX000101("EX000101", "账户不存在"),
    EX000105("EX000105", "密码错误"),
    EX000205("EX000205", "请求过于频繁"),
    EX900008("EX900008", "数据库异常"),
    EX900002("EX900002", "网络异常"),
    EX900001("EX900001", "配置错误"),
    EX000102("EX000102", "会话过期"),
    EX900007("EX900007", "文件上传失败"),
    EX900009("EX900009", "数据格式错误"),
    EX900004("EX900004", "服务正在维护"),
    EX900005("EX900005", "功能未实现"),
    EX900006("EX900006", "版本不兼容"),
    EX000103("EX000103", "账户已被锁定"),
    EX000108("EX000108", "验证码错误");

    /**
     * 异常代码
     */
    private final String code;
    
    /**
     * 异常消息
     */
    private final String message;


    /**
     * 构造函数
     *
     * @param code 异常代码
     * @param message 异常消息
     */
    private ExceptionStatus(String code, String message) {
        this.code = code;
        this.message = message;
    }

    /**
     * 获取异常消息
     *
     * @return 异常消息
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * 获取异常代码
     *
     * @return 异常代码
     */
    public String getCode() {
        return this.code;
    }
}
